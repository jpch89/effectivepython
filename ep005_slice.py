# 切片返回的是一个新的列表。
# 对新列表进行修改，不会影响原列表。
a = [1, 2, 3, [4, 5, 6], 7, 8]
b = a[2:]

print('更改前')
print('a为：', a)
print('b为：', b)


b[1] = [111, 222]
print('-' * 50)
print('更改后：')
print('a为：', a)
print('b为：', b)

"""
更改前
a为： [1, 2, 3, [4, 5, 6], 7, 8]
b为： [3, [4, 5, 6], 7, 8]
--------------------------------------------------
更改后：
a为： [1, 2, 3, [4, 5, 6], 7, 8]
b为： [3, [111, 222], 7, 8]
"""

# 赋值语句左侧切片出来的内容会自动替换成右侧的内容
# 左右两侧内容的长度不需要相等
print()
print('更改前')
print('a为：', a)
print('-' * 50)
a[:3] = [0]
print('更改后')
print('a为：', a)

"""
更改前
a为： [1, 2, 3, [4, 5, 6], 7, 8]
--------------------------------------------------
更改后
a为： [0, [4, 5, 6], 7, 8]
"""

# b = a[:] 得到的是对原列表的拷贝
b = a[:]
# 不会抛出 AssertionError
# 因为 a 和 b 值相等
# 但是位于内存的不同位置
assert b == a and b is not a

print()
# b = a 不会在内存中新建一个对象
b = a
# 所以 a 就是 b
assert a is b
print('更改前')
print('a为：', a)
# 左侧使用留空形式的切片操作，会使用右侧的值替换原列表的全部内容。
a[:] = ['a', 'b', 'c']
print('-' * 50)
print('更改后')
print('a为：', a)
"""
更改前
a为： [0, [4, 5, 6], 7, 8]
--------------------------------------------------
更改后
a为： ['a', 'b', 'c']
"""
